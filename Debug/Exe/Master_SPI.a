;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 10/19/2018
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#define F_CPU 8000000
;#define SW_ON PINC.0
;#define SW_OFF PINC.1
;unsigned char Data_Master=0;
;unsigned char Data_Slave=0;
;interrupt [SPI_STC] void spi_isr(void)
; 0000 0020 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0021 unsigned char data;
; 0000 0022 data=SPDR;
;PCODE: $0000000F VOL: 0
;	data -> R17
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0023 }
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;void SPI_Master_Init(void);
;void SPI_Slave_Init(void);
;unsigned char Check_SW(void);
;unsigned char SPI_Master_Transfer(unsigned char data_Master);
;unsigned char SPI_Slave_Receive(void);
;void main(void)
; 0000 002A {
;PCODE: $00000016 VOL: 0
; 0000 002B     SPI_Master_Init();
;PCODE: $00000017 VOL: 0
; 0000 002C     DDRC&=~0x03;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 002D     PORTC|=0x03;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 002E     #asm("sei")         // Global enable interrupts
;PCODE: $0000001E VOL: 0
	sei
;PCODE: $0000001F VOL: 0
; 0000 002F     while (1)
;PCODE: $00000020 VOL: 0
; 0000 0030           {
; 0000 0031             /*-----------Master Implementation---------*/
; 0000 0032             Data_Master=Check_SW();
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0033             SPI_Master_Transfer(Data_Master);
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0034             /*-----------------------------------------*/
; 0000 0035 
; 0000 0036           }
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0037 }
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;
;
;void SPI_Master_Init(void){
; 0000 003A void SPI_Master_Init(void){
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 003B      DDRB = (1<<5)|(1<<3);                // Set MOSI, SCK as Output
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 003C      SPCR =  (1<<SPE)|(1<<MSTR)|(0<<DORD);          // Enable SPI, Set as Master,Fosc/4 (2Mhz)
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 003D }
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;void SPI_Slave_Init(void){
; 0000 003E void SPI_Slave_Init(void){
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 003F     DDRB = (1<<4);     //MISO as OUTPUT
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0040     SPCR = (1<<SPE);   //Enable SPI
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0041 }
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;unsigned char Check_SW(void)
; 0000 0043 {
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0044     if(SW_ON==0)    return 1;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0045     else return 0;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0046 }
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;unsigned char SPI_Master_Transfer(unsigned char data_Master)
; 0000 0048 {
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0049     SPDR = data_Master;       // Load data into the buffer
;PCODE: $00000049 VOL: 0
;	data_Master -> Y+0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 004A     while(!(SPSR & (1<<SPIF) ));
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 004B     return(SPDR);             // Return received data
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 004C }
;PCODE: $00000055 VOL: 0
;unsigned char SPI_Slave_Receive(void)
; 0000 004E {
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 004F     while(!(SPSR & (1<<SPIF) ));
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0050     return(SPDR);      // Return received data
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0051 }
;PCODE: $00000060 VOL: 0
